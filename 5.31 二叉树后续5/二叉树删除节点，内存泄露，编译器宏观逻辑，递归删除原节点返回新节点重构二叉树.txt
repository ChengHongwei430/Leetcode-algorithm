/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {//删除二叉树节点
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        //递归法返回新的自己是常见操作
        if(!root) return nullptr;
        if(root->val==key) {      
            if(!root->left&&!root->right) {
                delete root;
                return nullptr;//删除原来的节点，返回新的节点
            }
            else if(root->left&&!root->right) {
                auto temp=root->left;//这里会出现空间先释放后使用的问题
                delete root;
                return temp;
            }
            else if(!root->left&&root->right) {
                auto temp=root->right;
                delete root;
                return temp;
            }
            else{
                TreeNode* rl=root->right;
                while(rl->left) rl=rl->left;
                rl->left=root->left;
                rl=root->right;
                delete root;
                return rl;
            }
            //如果全用if，在编译器逻辑里你这里缺少return，即使你不缺少，也会报错，因此else存在价值
        }
        else{
            root->left=deleteNode(root->left,key);
            root->right=deleteNode(root->right,key);
            return root;    
        }           
    }
};