/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
TreeNode* DeleteTreeNode(TreeNode* root){//删除一个节点，返回被替换的叶子节点
    TreeNode* de=NULL;
    if(root->left){
        de=root->left;
        while(de->right) de=de->right;//左子最右子
    }
    else if(root->right){
        de=root->right;
        while(de->left) de=de->left;
    }
    if(de) {
        //root->val=de->val;//这时候不能改
        return de;
    }else return root;
}

class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        TreeNode* lastroot=root;
        TreeNode* r=root;
        while(r){
            if(r->val>key) r=r->left;
            else if(r->val<key) r=r->right;
            else break;
        }
        TreeNode* rr=r;
        
        if(!r) return root;//没找到
        if(r==root&&!r->left&&!r->right) return NULL;
        //cout<<r->val;        
        TreeNode* leaf= DeleteTreeNode(r);//指针类型就是引用，不需要加&
        cout<<r->val<<"-"<<leaf->val;

        r=root;//归位
        while(r){
            if(r->val>leaf->val) {
                lastroot=r;
                r=r->left;               
            }
            else if(r->val<leaf->val) {
                lastroot=r;
                r=r->right;
            }else break;
        }
        rr->val=leaf->val;//找到后再改

        if(lastroot->left&&lastroot->left->val==leaf->val) lastroot->left=NULL;
        else lastroot->right=NULL;
        return root;
    }
};