/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        //修剪二叉树与删除二叉树节点的区别在于，只需要添加一边就行，
        //一个节点如果不满足条件，其只有一个子树可能满足条件
        //此外删除节点只可能发生一次，但修剪可能多次，并且包含
        if(!root) return nullptr;
        else if(root->val<low){
            root=trimBST(root->right,low,high);//删除的内部还可能删除 
            return root;          
        }
        else if(root->val>high){
            root=trimBST(root->left,low,high);
            return root; 
        }
        else{
            root->left =trimBST(root->left,low,high);
            root->right=trimBST(root->right,low,high);
            return root;
        }

    }
};