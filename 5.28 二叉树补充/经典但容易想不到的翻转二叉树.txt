/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

void Tree_Operator(TreeNode* root){
    if(!root) return;

    TreeNode* temp;

    temp=root->left;//使用前序，后序，层序都可以，就是不能使用中序
    //就是因为中序是在左右之间遍历，会使左右多翻转几次
    root->left=root->right;
    root->right=temp;

    Tree_Operator(root->left);
    Tree_Operator(root->right);
}


class Solution {
public:
    TreeNode* invertTree(TreeNode* root) {
        //本质上是在遍历的同时，交换左右子树位置

        Tree_Operator(root);
        return root;

    }
};