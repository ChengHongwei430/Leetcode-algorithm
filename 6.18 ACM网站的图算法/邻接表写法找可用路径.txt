
#include<iostream>
#include<vector>
#include<list>
using namespace std;

//深度优先遍历
void dfs(vector<list<int>> graph,int x,vector<int> &path,vector<vector<int>> &result){
    
    int psize=path.size();
    int gsize=graph.size();
    
    if(path[psize-1]==gsize-1){//路径的终点满足要求
        result.push_back(path);
        return;
    }
    
    for(int i:graph[x]){
        path.push_back(i);
        dfs(graph,i,path,result);
        path.pop_back();//回溯
    }
    
};

int main(){
    
    int n,m;//节点，边
    cin>>n>>m;
    int s,t;//起点终点
    
    //建立邻接表
    vector<list<int>> graph(n+1);
    
    for(int i=0;i<m;++i){
        cin>>s>>t;
        graph[s].push_back(t);//在s号链表插入一个节点
    }//为了能放下1到n的节点
    
    vector<int> path;
    vector<vector<int>> result;
    
    path.push_back(1);//把第一个节点放进去
    dfs(graph,1,path,result);
    
    //int sizer=result.size();
    //////对于数组的长度，不能直接当长度来算,先取出来就不会报错
    if(result.size()==0) cout<<-1<<endl;
    else{
        for(int i=0;i<result.size();++i){
            path=result[i];
            //cout<<"---"<<path.size()<<"---"<<endl;
            for(int j=0;j<path.size();++j){
                cout<<path[j];
                if(j<path.size()-1)cout<<" ";
            }
            cout<<endl;
        }
    }
    
    
    return 0;
}