class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {

        //找到递推公式,是求解动态规划问题的关键
        int n=cost.size();
        if(n<=1) return 0;

        //第二个关键是确定dp的含义，到达某一层的最低力气花费
        vector<int> dp(n+1,0);
        dp[0]=0;
        dp[1]=0;
        //dp[2]=min(dp[0]+cost[0],dp[1]+cost[1]);

        for(int i=2;i<=n;++i){
            dp[i]=min(dp[i-2]+cost[i-2],dp[i-1]+cost[i-1]);
            //核心就是从之前的状态来推理现在的状态
            //到达n阶只有两种可能，从n-1阶来，或者从n-2阶来
        }

        return dp[n];

    }
};