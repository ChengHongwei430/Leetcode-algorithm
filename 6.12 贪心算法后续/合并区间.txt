class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& intervals) {
        
        //就是把之前那题修改一下就行
        //之前判断重叠使用的是交集，但最这题合并区间需要使用并集

        vector<vector<int>> result;
        vector<vector<int>> points =intervals;
        sort(points.begin(),points.end());//自动按第一列排序了
        int low=points[0][0],high=points[0][1];//直接使用第一个区间
        //在已经排序的情况下，判断重叠其实只需要看a区间第二个和b区间第一个就行

        for(int i=0;i<points.size();++i){
            
            if(points[i][1]<low||points[i][0]>high){
                result.push_back({low,high});
                low=points[i][0],high=points[i][1];
            }
            else if(points[i][0]<=low&&points[i][1]>=high){
                low=points[i][0];high=points[i][1];
            }
            else if(points[i][0]<low&&points[i][1]<high) low=points[i][0];
            else if(points[i][0]>low&&points[i][1]>high) high=points[i][1];

            cout<<low<<"--"<<high<<"  ";
        }
        result.push_back({low,high});
        
        return result;

    }
};