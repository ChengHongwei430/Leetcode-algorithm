class Solution {
public:
    int findMinArrowShots(vector<vector<int>>& points) {
        
        //本质上就是求重叠区间
        //先把区间按起点递增来排列，然后来寻找重叠区间
        //首先要明白的就是这样不会漏，而且就是最优最少的

        sort(points.begin(),points.end());//自动按第一列排序了
        int low=INT32_MIN,high=INT32_MAX;
        int counts=1;
        for(int i=0;i<points.size();++i){
            
            if(points[i][1]<low||points[i][0]>high){
                low=points[i][0],high=points[i][1];
                counts++;
            }
            else if(points[i][0]>=low&&points[i][1]<=high){
                low=points[i][0];high=points[i][1];
            }
            else if(points[i][0]<low&&points[i][1]<=high) high=points[i][1];
            else if(points[i][0]>=low&&points[i][1]>high) low=points[i][0];

            cout<<low<<"--"<<high<<"  ";
        }
        
        return counts;

    }
};