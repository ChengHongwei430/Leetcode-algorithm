/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        //同一模式的非递归二叉树遍历
        stack<TreeNode*> st;//栈来存放节点
        vector<int> ve;
        if(root) st.push(root);//////////////必须要根节点存在
        while(!empty(st)){
            if(st.top()){   
                TreeNode* temp=st.top();//取栈顶元素
                st.pop();//出栈一个，为了保证顺序
                //因为是栈，所以要反向的顺序
                if(temp->right) st.push(temp->right);//右
                st.push(temp);//中
                st.push(NULL);//标记出栈元素
                if(temp->left) st.push(temp->left);//左

            }else{
                st.pop();//出栈NULL
                TreeNode* temp=st.top();//取栈顶元素
                st.pop();//出栈
                ve.push_back(temp->val);
            }
        }
        return ve;
    }
};
//核心思路是在第一次遍历时先不输出，先把顺序按反向摆好，标记第二次进入的节点，在第二次遍历时输出