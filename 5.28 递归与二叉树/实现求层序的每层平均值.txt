/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {

        queue<TreeNode*> que;//队列用来存节点
        if(root) que.push(root);
        vector<double> ve;
        while(!que.empty()){
            double sum=0;
            int sizeq = que.size();//////////////////////////确定这一层的规模        
            for(int i=0;i<sizeq;++i){
                TreeNode* temp = que.front();//这里是核心，控制每一层的规模
                que.pop();
                sum+=temp->val;
                if(i==sizeq-1) ve.push_back(sum/sizeq);
                if(temp->left) que.push(temp->left);
                if(temp->right) que.push(temp->right);
            }
        }
        return ve;
    }
};