
//核心的思路其实就是每一行取一个位置来实现遍历
//放皇后就是Q，回溯就是改成.
//终止条件是，棋盘里的皇后数量

bool isneed(vector<string> &path,int row,int col){//判断第几行的第几列是否合法
    
    //同行不需要判断，因为每一行只取一个
   
    //同列不同行
    for(int i=0;i<path.size();++i){
        if(i!=row&&path[i][col]=='Q') return 0;
    }

    //判断左斜线
    //////官方参考答案只考虑左边，是因为遍历是从左到右的，右边不可能有Q
    for(int i=row-1,j=col+1;i>=0&&j>=0;i--,j++){
        ///////////////////////////////////中间的判断条件必须写成一句
        if(path[i][j]=='Q') return 0;
    }

    //判断右斜线
    //////官方参考答案只考虑左边，是因为遍历是从左到右的，右边不可能有Q
    for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--){
        if(path[i][j]=='Q') return 0;
    }

    return 1;


}



void backtracking(int n,int row,vector<string> &path,vector<vector<string>> &result){
    if(row==n){//不需要记录有几个皇后，如果可以执行到最后一行，就说明放下了三个
        result.push_back(path);
        return;
    }
    for(int i=0;i<n;++i){
        if(isneed(path,row,i)){//这一个位置合法
            path[row][i]='Q';
            backtracking(n,row+1,path,result);
            path[row][i]='.';
        }
    }
}


class Solution {
public:
    vector<vector<string>> solveNQueens(int n) {
        
        string inis(n,'.');//初始字符串
        vector<string> path(n,inis);//初始字符串数组

        vector<vector<string>> result;     
        backtracking(n,0,path,result);

        return result;

    }
};