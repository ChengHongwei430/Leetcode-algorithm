
//逻辑上数独与N皇后类似，
//区别在于数独虽然也是从左到右从上到下，但有些位置提前就有值
//所以不能只判断坐上角
//也因此容易超时，必须使用bool返回来提前出来
//使用bool终止的思路就是要明白执行到某一行意味着什么


bool isneed(vector<vector<char>>& board,int ii,int jj,char temp){
    
    //同行不同列，只要看左边的就行
    for(int i=0;i<9;++i){
        if(board[i][jj]==temp) return 0;
    }

    //同列不同行
    for(int j=0;j<9;++j){
        if(board[ii][j]==temp) return 0;
    }

    //所在的小方格
    int x=(ii/3)*3,y=(jj/3)*3;//找到小方格的起点
    for(int i=x;i<x+3;++i){
        for(int j=y;j<y+3;++j){
            if(board[i][j]==temp) return 0;
        }
    }

    return 1;
}


bool backtracking(vector<vector<char>>& board){

    //不需要返回条件，就是要遍历完所有情况，返回能不能有解就行
    int len=board.size();//其实就是9
    for(int i=0;i<len;++i){
        for(int j=0;j<len;++j){
            if(board[i][j]=='.'){//需要填数独
                for(int k=1;k<=9;++k){
                    char temp='0'+k;//取出这个数字字符形式
                    if(isneed(board,i,j,temp)){
                        board[i][j]=temp;
                        if(backtracking(board)) return 1;
                        board[i][j]='.';
                    }
                }
                return 0;//一个位置1-9都不行，数独没解
            }
        }
    }
    return 1;//全部位置都找到了
}


class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {

        backtracking(board);//不需要返回，直接执行就好

    }
};