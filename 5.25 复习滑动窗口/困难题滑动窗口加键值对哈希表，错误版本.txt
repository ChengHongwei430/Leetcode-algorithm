#include<unordered_map>

bool ishave(unordered_map<char,int> father,unordered_map<char,int> son){
    //判断father中是否含有完整的son
    unordered_map<char,int>::iterator it = son.begin();
    for(;it!=son.end();++it){
        if(father.find(it->first)==father.end()) return 0;
        else{
            if(father.find(it->first)->second<it->second) return 0;
        }
    }
    return 1;
}


class Solution {
public:
    string minWindow(string s, string t) {
   
        unordered_map<char,int> son;     
        for(int i=0;i<t.size();++i) son[t[i]]++;//子串   

        int minlen=INT32_MAX;//记录最短长度

        unordered_map<char,int> father;//待匹配子串 
        int left=0,minleft=0;//子串起点
        int right=0;//子串下一个
        father[s[0]]++;//初始子串
        if(ishave(father,son)) minlen=1;

        while(right<s.size()){
             father[right++]++;//加入新元素
             while(ishave(father,son)){//满足条件的处理
                if(right-left<minlen){
                    minlen=right-left;
                    minleft=left;
                }               
                father[s[left++]]--;//删除第一个元素
                if(father.find(s[left-1])->second==0) father.erase(s[left-1]);
             } 
        }

        if(minlen==INT32_MAX) return "";
        else return s.substr(minleft,minlen);
    };
};