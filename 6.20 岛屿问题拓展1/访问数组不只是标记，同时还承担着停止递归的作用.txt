
#include<iostream>
#include<vector>

//不要尝试用一个访问数组来完成两次查找
//数组本身还承担着停止递归的作用，用两个访问数组就行

using namespace std;

vector<pair<int,int>> dir={{1,0},{-1,0},{0,1},{0,-1}};//四个方向

void dfs(vector<vector<int>> &graph,vector<vector<int>> &visited,int i,int j){
    
    if(visited[i][j]) return;
    visited[i][j]++;//访问标记
    
    for(int k=0;k<dir.size();++k){
        
        int x=i+dir[k].first;
        int y=j+dir[k].second;
        
        if(x<0||x>=graph.size()||y<0||y>=graph[0].size()) continue;
        
        if(graph[x][y]>=graph[i][j]&&!visited[x][y]){
            dfs(graph,visited,x,y);
        }
    }
    
}

int main(){
    
    int x,y;
    cin>>x>>y;
    
    vector<vector<int>> graph(x,vector<int>(y,0));//表示岛屿地图
    for(int i=0;i<x;++i){
        for(int j=0;j<y;++j){
            cin>>graph[i][j];
        }
    }

    vector<vector<int>> visited1(x,vector<int>(y,0));//表示节点的访问情况
    vector<vector<int>> visited2(x,vector<int>(y,0));//表示节点的访问情况
    
    //访问边缘相连的岛屿，全部左闭右开,左下右上逗逼
    for(int j=0;j<y;++j) dfs(graph,visited1,0,j);//左上角
    for(int i=1;i<x;++i) dfs(graph,visited1,i,0);
    
    for(int i=0;i<x-1;++i) dfs(graph,visited2,i,y-1);//右下角
    for(int j=0;j<y;++j) dfs(graph,visited2,x-1,j);
    
    
    for(int i=0;i<x;++i){
        for(int j=0;j<y;++j) if(visited1[i][j]&&visited2[i][j]) cout<<i<<" "<<j<<endl;
    }
    
    
}