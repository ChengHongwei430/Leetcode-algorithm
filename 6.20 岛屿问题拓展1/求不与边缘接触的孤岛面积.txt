
#include<iostream>
#include<vector>
#include<limits.h>//是.h文件
//岛屿问题肯定还是深搜代码简单一点，不需要使用队列

//检查错误的能力很重要
//遍历变量的写法，当修改时，一定要注意不能写错
//赋值和判断的区别，不能使用==
//变量定义时，类型不能乱，long long 型的数据必须使用limits.h，有.h要加

using namespace std;

vector<pair<int,int>> dir={{1,0},{-1,0},{0,1},{0,-1}};//四个方向

void dfs(vector<vector<int>> &graph,vector<vector<int>> &visited,int i,int j,long long  &counts,bool &flag){
    visited[i][j]=1;//访问标记
    counts++;
    int dirsize=dir.size();
    for(int k=0;k<dirsize;++k){
        int x=i+dir[k].first;
        int y=j+dir[k].second;
        if(x<0||x>=graph.size()||y<0||y>=graph[0].size())
        {
            flag=1;
            continue;
        }
        //直接抛弃这个点的检查
        if(graph[x][y]&&!visited[x][y]){
            dfs(graph,visited,x,y,counts,flag);
        }
    }
}

int main(){
    
    int x,y;
    cin>>x>>y;
    
    vector<vector<int>> graph(x,vector<int>(y,0));//表示岛屿地图
    for(int i=0;i<x;++i){
        for(int j=0;j<y;++j){
            cin>>graph[i][j];
        }
    }
    //long long maxg=LLONG_MIN;
    long long iscounts=0;
    vector<vector<int>> visited(x,vector<int>(y,0));//表示节点的访问情况
    for(int i=0;i<x;++i){
        for(int j=0;j<y;++j){
            long long counts=0;
            bool flag=0;
            if(graph[i][j]&&!visited[i][j]) dfs(graph,visited,i,j,counts,flag);
            //没有访问过的岛屿
            if(flag==0) iscounts+=counts;
        }
    }
    cout<<iscounts<<endl;
    
}