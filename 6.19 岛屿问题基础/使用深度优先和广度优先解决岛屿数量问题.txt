
#include<iostream>
#include<vector>
#include<queue>
using namespace std;




vector<pair<int,int>> dir={{0,1},{1,0},{-1,0},{0,-1}};//四个移动方向

void dfs(vector<vector<bool>> &graph,vector<vector<bool>> &visited,int x,int y){
    //对于输入的点，进行深度遍历
    for(int i=0;i<4;++i){
        
        int xx=x+dir[i].first;
        int yy=y+dir[i].second;
        //////////////pair可以用来实现一个组合，使用first/second来输出
        
        if(xx>=graph.size()||xx<0||yy>=graph[0].size()||yy<0) continue;//越界
        
        //未访问过，且是岛屿
        if(!visited[xx][yy]&&graph[xx][yy]){
            visited[xx][yy]=true;
            dfs(graph,visited,xx,yy);
        }
        
    }
}
///////////////////有时候提示的错误位置并不是真的错误所在

void pfs(vector<vector<bool>> &graph,vector<vector<bool>> &visited,queue<pair<int,int>> &qu){
    //对于输入的点，进行深度遍历
    while(!qu.empty()){
        
        pair<int,int> temp=qu.front(); qu.pop();//出队队首元素
        
        for(int i=0;i<4;++i){
        
            int xx=temp.first+dir[i].first;
            int yy=temp.second+dir[i].second;
            //////////////pair可以用来实现一个组合，使用first/second来输出
        
            if(xx>=graph.size()||xx<0||yy>=graph[0].size()||yy<0) continue;//越界
        
            //未访问过，且是岛屿
            if(!visited[xx][yy]&&graph[xx][yy]){
                visited[xx][yy]=true;
                qu.push({xx,yy});
            }
        }
    }
}


int main(){
    
    //使用深度优先来计算岛屿数量
    //深度优先和广度优先的区别
    //在于深度优先直接使用递归栈，广度优先需要队列来辅助,广度优先不递归
    //用队列是为了保证每次遍历的方向一致
    
    int x,y,z;
    cin>>x>>y;
    ///////////////////输入的方向，容易写错
    
    vector<vector<bool>> visited(x,vector<bool>(y,false));
    vector<vector<bool>> graph(x,vector<bool>(y,false));
    
    for(int i=0;i<x;++i){
        for(int j=0;j<y;++j){
            cin>>z;
            if(z==1) graph[i][j]=true;
        }
    }//生成海图
    
    int result=0;
    
    queue<pair<int,int>> qu;//点的队列，记录要访问的点，使用回溯
    
    
    for(int i=0;i<x;++i){//深度遍历的一部分在主函数中
        for(int j=0;j<y;++j){
            if(!visited[i][j]&&graph[i][j]){//未访问过，且是岛屿
                result++;
                visited[i][j]=true;
                //dfs(graph,visited,i,j);
                qu.push({i,j});//第一个点入队
                pfs(graph,visited,qu);
            }
        }
    }
    
    cout<<result;
    
    system("pause");
    
}