/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
TreeNode* TreeOperator(vector<int>& inorder, vector<int>& postorder){

    if(postorder.size()==0) return NULL;
    TreeNode* root = new TreeNode(postorder[postorder.size()-1]);
    if(postorder.size()==1) return root;

    else{//后续数组长度不为1时

        auto it=inorder.begin();
        int len=0;
        for(;it!=inorder.end();++it){           
            if(*it==postorder[postorder.size()-1]) break;
            len++;//记录前序左子树的长度
        }//找到前序中的分割点

        vector<int> left1(inorder.begin(),inorder.begin()+len);
        vector<int> right1(inorder.begin()+len+1,inorder.end());
        vector<int> left2(postorder.begin(),postorder.begin()+len);
        vector<int> right2(postorder.begin()+len,postorder.end()-1);
        //数组长度画图来确认

        root->left = TreeOperator(left1,left2);
        root->right = TreeOperator(right1,right2);

        return root;
    }
}


class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        if (inorder.size() == 0 || postorder.size() == 0) return NULL;
        return TreeOperator(inorder, postorder);
    }
};