/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
//先写出先序遍历算法
void TreeOperator(TreeNode* root,vector<int> ve,vector<string>& result){

    //C++不能返回多种类型值的问题，直接在参数里加上引用型参数就好，不需要返回

    //if(root==NULL) return;//要不要都行，因为没机会来着了

    ve.push_back(root->val);

    if(!root->left&&!root->right){
        string s;//空白字符串
        for(int i=0;i<ve.size();++i){
            s+=to_string(ve[i]);//转字符串函数
            if(i<ve.size()-1)s+="->";
        }
        result.push_back(s);
    }  

    
    if(root->left){//只能在存在的时候执行，因为不存在的时候也会执行删除操作ve.pop_back()
        TreeOperator(root->left,ve,result);
        //ve.pop_back();
        //带回溯就一定要要求在存在时才执行，不然就会出现多删除的情况
    }

    if(root->right){
        TreeOperator(root->right,ve,result);
        //ve.pop_back();
    }

}


class Solution {
public:
    vector<string> binaryTreePaths(TreeNode* root){

        vector<int> ve;
        vector<string> result;
        TreeOperator(root,ve,result);
        return result;

    }
};