/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */


class Solution {
public:
    bool isSymmetric(TreeNode* root) {

        stack<TreeNode*> st;//对称二叉树非递归类似层序遍历

        st.push(root->right);
        st.push(root->left);//将子树为空的情况纳入了考虑

        while(!st.empty()){
            TreeNode* a = st.top(); st.pop();//左树
            TreeNode* b = st.top(); st.pop();//右树

            if(!a&&!b) continue;//叶子节点不会再有机会产生后代
            if(!a||!b||a->val!=b->val) return 0;
         
            st.push(b->left);
            st.push(a->right);

            st.push(b->right);
            st.push(a->left);
        }
        return 1;//一直没问题，后面就是对的
    }
};